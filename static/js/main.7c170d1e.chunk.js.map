{"version":3,"sources":["logo.svg","Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableHeader","className","TableBody","props","characterData","map","item","index","key","name","job","onClick","removeCharacter","Table","Form","handleChange","event","target","value","setState","submitForm","handleSubmit","state","initialState","this","type","onChange","Component","App","characters","filter","i","character","data","fetch","then","result","json","entry","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,6HCErCC,G,MAAc,kBAChB,2BAAOC,UAAU,gBACb,4BACI,oCACA,mCACA,0CAKNC,EAAY,SAACC,GAAD,OACd,+BAEQA,EAAMC,cAAcC,KAChB,SAACC,EAAMC,GAAP,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAKG,MACV,4BAAKH,EAAKI,KACV,4BACI,4BAAQC,QAAS,kBAAMR,EAAMS,gBAAgBL,KAA7C,iBAqBbM,EAVD,SAAC,GAAD,IAAGT,EAAH,EAAGA,cAAeQ,EAAlB,EAAkBA,gBAAlB,OACV,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIR,cAAeA,EACfQ,gBAAiBA,M,OCsBdE,E,YAxDX,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KAUVY,aAAe,SAACC,GAAW,IAAD,EACEA,EAAMC,OAAtBR,EADc,EACdA,KAAMS,EADQ,EACRA,MAEd,EAAKC,SAAL,eACKV,EAAOS,KAfG,EAmBnBE,WAAa,WACT,EAAKjB,MAAMkB,aAAa,EAAKC,OAC7B,EAAKH,SAAS,EAAKI,eAlBnB,EAAKA,aAAe,CAChBd,KAAM,GACNC,IAAK,IAGT,EAAKY,MAAQ,EAAKC,aARH,E,sEAwBT,IAAD,EACiBC,KAAKF,MAAnBb,EADH,EACGA,KAAMC,EADT,EACSA,IAEd,OACI,8BACI,6BACA,uCACA,2BACIe,KAAK,OACLhB,KAAK,OACLS,MAAOT,EACPiB,SAAUF,KAAKT,eAEnB,6BACA,sCACA,2BACIU,KAAK,OACLhB,KAAK,MACLS,MAAOR,EACPgB,SAAUF,KAAKT,eAEnB,6BACA,2BACIU,KAAK,SACLP,MAAM,SACNP,QAASa,KAAKJ,kB,GAlDfO,aC0FJC,E,YArFb,WAAYzB,GAAQ,IAAD,8BACjB,4CAAMA,KAqBRS,gBAAkB,SAACL,GAAW,IACpBsB,EAAe,EAAKP,MAApBO,WAER,EAAKV,SAAS,CACZU,WAAYA,EAAWC,QACrB,SAACxB,EAAMyB,GACL,OAAOA,IAAMxB,QA5BF,EAkCnBc,aAAe,SAACW,GACd,EAAKb,SAAS,CACZU,WAAW,GAAD,mBAAM,EAAKP,MAAMO,YAAjB,CAA6BG,OAjCzC,EAAKV,MAAQ,CAEXO,WAAY,GACZI,KAAM,IANS,E,iFAUE,IAAD,OAGlBC,MAFY,kGAGTC,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACC,GACL,EAAKjB,SAAS,CACZc,KAAMG,S,+BAuBJ,IAAD,EACsBZ,KAAKF,MAA1BO,EADD,EACCA,WAEFO,EAHC,EACaH,KAEA5B,KAClB,SAACiC,EAAO/B,GACN,OAAO,wBAAIC,IAAKD,GAAQ+B,MAI5B,OACE,yBAAKrC,UAAU,aACb,8CACA,kFACA,kBAAC,EAAD,CACEG,cAAeyB,EACfjB,gBAAiBY,KAAKZ,kBAExB,uCACA,kBAAC,EAAD,CAAMS,aAAcG,KAAKH,eACzB,sDAEEe,O,GA9DQT,aCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.7c170d1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\r\n\r\nconst TableHeader = () => (\r\n    <thead className=\"headerStyles\">\r\n        <tr>\r\n            <th>Name</th>\r\n            <th>Job</th>\r\n            <th>Remove</th>\r\n        </tr>\r\n    </thead>\r\n)\r\n\r\nconst TableBody = (props) => (\r\n    <tbody>\r\n        {\r\n            props.characterData.map(\r\n                (item, index) => (\r\n                    <tr key={index}>\r\n                        <td>{item.name}</td>\r\n                        <td>{item.job}</td>\r\n                        <td>\r\n                            <button onClick={() => props.removeCharacter(index)}>\r\n                                Delete\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            )\r\n        }\r\n    </tbody>\r\n)\r\n\r\nconst Table = ({ characterData, removeCharacter }) => (\r\n    <table>\r\n        <TableHeader />\r\n        <TableBody\r\n            characterData={characterData}\r\n            removeCharacter={removeCharacter}\r\n        />\r\n    </table>\r\n)\r\n\r\nexport default Table","import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.initialState = {\r\n            name: '',\r\n            job: ''\r\n        }\r\n\r\n        this.state = this.initialState\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { name, job } = this.state\r\n\r\n        return (\r\n            <form>\r\n                <br />\r\n                <label>Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <br />\r\n                <label>Job</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"job\"\r\n                    value={job}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <br />\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"Submit\"\r\n                    onClick={this.submitForm}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Table from './Table'\nimport Form from './Form'\nimport { characters } from './data'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      // characters: characters,\n      characters: [],\n      data: []\n    }\n  }\n\n  componentDidMount() {\n    const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*\"\n\n    fetch(url)\n      .then((result) => result.json())\n      .then((result) => {\n        this.setState({\n          data: result\n        })\n      })\n  }\n\n  removeCharacter = (index) => {\n    const { characters } = this.state\n\n    this.setState({\n      characters: characters.filter(\n        (item, i) => {\n          return i !== index\n        }\n      )\n    })\n  }\n\n  handleSubmit = (character) => {\n    this.setState({\n      characters: [...this.state.characters, character]\n    })\n  }\n\n  render() {\n    const { characters, data } = this.state\n\n    const result = data.map(\n      (entry, index) => {\n        return <li key={index}>{entry}</li>\n      }\n    )\n\n    return (\n      <div className=\"container\">\n        <h1>React Tutorial</h1>\n        <p>Add a character with a name and a job to the table.</p>\n        <Table\n          characterData={characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <h3>Add New</h3>\n        <Form handleSubmit={this.handleSubmit} />\n        <h3>Fetch data in from API</h3>\n        {\n          result\n        }\n      </div>\n\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //     <p>\n      //       Edit <code>src/App.js</code> and save to reload.\n      //     </p>\n      //     <a\n      //       className=\"App-link\"\n      //       href=\"https://reactjs.org\"\n      //       target=\"_blank\"\n      //       rel=\"noopener noreferrer\"\n      //     >\n      //       Learn React\n      //     </a>\n      //   </header>\n      // </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}